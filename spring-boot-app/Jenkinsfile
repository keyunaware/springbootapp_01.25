pipeline {
  environment {
    PROJECT = "sandbox-io-289003"
    APP_NAME = "keyuna-app"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "jenkins-cd"
    CLUSTER_ZONE = "us-east1-d"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
    // REPO = "keyunaware/springbootapp_01.25.git"
  }

  agent {
    kubernetes {
      label 'build-deploy-agent'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name:  maven
    image:  maven
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  // - name: git
  //   image: bitnami/git:2.40.0
  //   imagePullPolicy: IfNotPresent
  //   command:
  //  - cat
  //   tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.6.0-debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
"""
}
  }
  stages {
    stage('Compilation') {
       steps {
        container('maven') {
         dir("spring-boot-app") {
          sh "mvn clean install -DskipTests"
          }
        }
      }
    }
    stage('Build and push image with Google Container Registry') {
      steps {
        container('kaniko') {
          dir("spring-boot-app") {
            // No access to docker deamon so kaniko is the best option to build docker within kubernetes jenkins agent
            // The equivilant to docker build, tag and push
           sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${IMAGE_TAG}"
         }
        }
      }
    }
    stage('Deploy to kubernetes') {
      steps {
        container('kubectl') {
          dir("spring-boot-app") {
            // No access to docker deamon so kaniko is the best option to build docker within kubernetes jenkins agent
            // The equivilant to docker build, tag and push
           sh "ls"
           sh "kubectl apply -f deployment.yaml"
           sh "kubectl apply -f service.yaml"
           sh "kubectl apply -f configmap.yaml"
         }
        }
      }
    }
  }
}
  //   if (BRANCH_NAME == "master"){
  //   stage('Release') {
  //     steps {
  //       container('git') {
  //       withCredentials([string(credentialsId: 'keyuna-text', variable: 'TOKEN')]) {
  //         sh '''#!/bin/bash
  //           git config --global user.name "keyunaware"
  //           git config --global user.email "keyuna.ware@cod-it.tech"
  //           git config --global user.password "$TOKEN"
  //           git config --global --add safe.directory '*'
  //           LAST_LOG=$(git log --format='%H' --max-count=1 origin/master)
  //           echo "LAST_LOG:$LAST_LOG"
  //           LAST_MERGE=$(git log --format='%H' --merges --max-count=1 origin/master)
  //           echo "LAST_MERGE:$LAST_MERGE"
  //           LAST_MSG=$(git log --format='%s' --max-count=1 origin/master)
  //           echo "LAST_MSG:$LAST_MSG"
  //           VERSION=$(echo $LAST_MSG | grep --only-matching 'v\\?[0-9]\\+\\.[0-9]\\+\\(\\.[0-9]\\+\\)\\?')
  //           echo "VERSION:$VERSION"
            
  //           if [[ $LAST_LOG == $LAST_MERGE && -n $VERSION ]]
  //           then
  //               DATA='{
  //                   "tag_name": "'$VERSION'",
  //                   "target_commitish": "master",
  //                   "name": "'$VERSION'",
  //                   "body": "'$LAST_MSG'",
  //                   "draft": false,
  //                   "prerelease": false
  //               }'
  //               curl --header "Accept: application/vnd.github+json" --header "Authorization: Bearer $TOKEN" --data "$DATA" "https://api.github.com/repos/$REPO/releases"
  //           fi
  //           ''
  //         }
  //       }
  //     }
  //   }
  //   else{
  //   stage('Compilation') {
  //      steps {
  //       container('maven') {
  //        dir("spring-boot-app") {
  //         sh "mvn clean install -DskipTests"
  //         }
  //       }
  //     }
  //   }
  // }
  //   stage('Build and push image with Google Container Registry') {
  //     steps {
  //       container('kaniko') {
  //         dir("spring-boot-app") {
  //           // No access to docker deamon so kaniko is the best option to build docker within kubernetes jenkins agent
  //           // The equivilant to docker build, tag and push.
  //          sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${IMAGE_TAG}"
  //        }
  //       }
  //     }
  //   }
  //   stage('Deploy to kubernetes') {
  //     steps {
  //       container('kubectl') {
  //         dir("spring-boot-app") {
  //           if ("${env.BRANCH_NAME}" == "master"){
  //              sh "helm template  jason ./jason-spring-chart/ --set image.tag=${env.BRANCH_NAME}.${env.BUILD_NUMBER} | kubectl apply -f - "
  //           }
  //           else{
  //           sh "helm template  jason ./jason-spring-chart/ --set image.tag=${env.BRANCH_NAME}.${env.BUILD_NUMBER} | kubectl apply -f - "
  //         //  sh "kubectl apply -f deployment.yaml"
  //          }
  //         }
  //        }
  //       }
